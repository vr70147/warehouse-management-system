global:
  imageRegistry: ''

  imagePullSecrets: []

  postgresql:
    auth:
      postgresPassword: ''
      username: ''
      password: ''
      database: ''
      existingSecret: 'user-management-db'
      secretKeys:
        adminPasswordKey: 'ADMIN_PASS'
        userPasswordKey: 'USER_PASS'
        replicationPasswordKey: 'REPLICATION_PASS'

    service:
      ports:
        postgresql: ''

fullnameOverride: 'postgres-user-management'

clusterDomain: cluster.local

extraDeploy: []

commonLabels: {}
onAnnotations: {}

image:
  registry: docker.io
  repository: bitnami/postgresql
  tag: '16'
  digest: ''

  pullPolicy: IfNotPresent

  pullSecrets: []

  debug: true

auth:
  enablePostgresUser: false

architecture: standalone

replication:
  synchronousCommit: 'off'
  numSynchronousReplicas: 0

  applicationName: my_application

containerPorts:
  postgresql: 2432

audit:
  logHostname: false
  logConnections: false
  logDisconnections: false
  pgAuditLog: ''
  pgAuditLogCatalog: 'off'
  clientMinMessages: error
  logLinePrefix: ''
  logTimezone: ''

ldap:
  enabled: false
  server: ''
  port: ''
  prefix: ''
  suffix: ''
  basedn: ''
  binddn: ''
  bindpw: ''
  searchAttribute: ''
  searchFilter: ''
  scheme: ''
  tls:
    enabled: false

  uri: ''

postgresqlDataDir: /bitnami/postgresql/data

postgresqlSharedPreloadLibraries: 'pgaudit'

shmVolume:
  enabled: true

  sizeLimit: ''

tls:
  enabled: false

  autoGenerated: false

  preferServerCiphers: true

  certificatesSecret: ''

  certFilename: ''

  certKeyFilename: ''

  certCAFilename: ''

  crlFilename: ''

primary:
  name: primary

  configuration: ''

  pgHbaConfiguration: ''

  existingConfigmap: ''

  extendedConfiguration: ''

  existingExtendedConfigmap: ''

  initdb:
    args: ''

    postgresqlWalDir: ''

    scripts: {}

    scriptsConfigMap: ''

    scriptsSecret: ''

    user: ''

    password: ''

  standby:
    enabled: false
    primaryHost: ''
    primaryPort: ''

  extraEnvVars: []

  extraEnvVarsCM: ''

  extraEnvVarsSecret: ''

  command: []

  args: []

  livenessProbe:
    enabled: true
    initialDelaySeconds: 300
    periodSeconds: 10
    timeoutSeconds: 2
    failureThreshold: 6
    successThreshold: 1

  readinessProbe:
    enabled: true
    initialDelaySeconds: 2
    periodSeconds: 10
    timeoutSeconds: 2
    failureThreshold: 6
    successThreshold: 1

  startupProbe:
    enabled: false
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 1
    failureThreshold: 12
    successThreshold: 1

  customLivenessProbe: {}

  customReadinessProbe: {}

  customStartupProbe: {}

  lifecycleHooks: {}

  resourcesPreset: 'nano'

  resources:
    requests:
      cpu: 20m
      memory: 20Mi
    limits:
      cpu: 20m
      memory: 20Mi

  podSecurityContext:
    enabled: true
    fsGroupChangePolicy: Always
    sysctls: []
    supplementalGroups: []
    fsGroup: 1001

  containerSecurityContext:
    enabled: true
    seLinuxOptions: {}
    runAsUser: 1001
    runAsGroup: 1001
    runAsNonRoot: true
    privileged: false
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    capabilities:
      drop: ['ALL']
    seccompProfile:
      type: 'RuntimeDefault'

  automountServiceAccountToken: false

  hostAliases: []

  hostNetwork: false

  hostIPC: false

  labels: {}

  annotations: {}

  podLabels: {}

  podAnnotations: {}

  podAffinityPreset: ''

  podAntiAffinityPreset: soft

  nodeAffinityPreset:
    type: ''

    key: ''

    values: []

  affinity: {}

  nodeSelector: {}

  tolerations: []

  topologySpreadConstraints: []

  priorityClassName: ''

  schedulerName: ''

  terminationGracePeriodSeconds: ''

  updateStrategy:
    type: RollingUpdate
    rollingUpdate: {}

  extraVolumeMounts: []

  extraVolumes: []

  sidecars: []

  initContainers: []

  extraPodSpec: {}

  networkPolicy:
    enabled: true

    allowExternal: true

    allowExternalEgress: true
      - frontend
    extraIngress: []

    extraEgress: []

    ingressNSMatchLabels: {}
    ingressNSPodMatchLabels: {}

  service:
    type: ClusterIP

    ports:
      postgresql: 2432

    nodePorts:
      postgresql: ''

    clusterIP: ''

    annotations: {}

    loadBalancerIP: ''

    externalTrafficPolicy: Cluster

    loadBalancerSourceRanges: []

    extraPorts: []

    sessionAffinity: None

    sessionAffinityConfig: {}

    headless:
      annotations: {}

  persistence:
    enabled: true

    volumeName: 'data'

    existingClaim: ''

    mountPath: /bitnami/postgresql

    subPath: ''

    storageClass: ''

    accessModes:
      - ReadWriteOnce

    size: 2Gi

    annotations: {}

    labels: {}

    selector: {}

    dataSource: {}

  persistentVolumeClaimRetentionPolicy:
    enabled: false

    whenScaled: Retain

    whenDeleted: Retain

readReplicas:
  name: read

  replicaCount: 1

  extendedConfiguration: ''

  extraEnvVars: []

  extraEnvVarsCM: ''

  extraEnvVarsSecret: ''

  command: []

  args: []

  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 2
    failureThreshold: 6
    successThreshold: 1

  readinessProbe:
    enabled: true
    initialDelaySeconds: 2
    periodSeconds: 10
    timeoutSeconds: 2
    failureThreshold: 6
    successThreshold: 1

  startupProbe:
    enabled: false
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 1
    failureThreshold: 12
    successThreshold: 1

  customLivenessProbe: {}

  customReadinessProbe: {}

  customStartupProbe: {}

  lifecycleHooks: {}

  resourcesPreset: 'nano'

  resources: {}

  podSecurityContext:
    enabled: true
    fsGroupChangePolicy: Always
    sysctls: []
    supplementalGroups: []
    fsGroup: 1001

  containerSecurityContext:
    enabled: true
    seLinuxOptions: {}
    runAsUser: 1001
    runAsGroup: 1001
    runAsNonRoot: true
    privileged: false
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    capabilities:
      drop: ['ALL']
    seccompProfile:
      type: 'RuntimeDefault'

  automountServiceAccountToken: false

  hostAliases: []

  hostNetwork: false

  hostIPC: false

  labels: {}

  annotations: {}

  podLabels: {}

  podAnnotations: {}

  podAffinityPreset: ''

  podAntiAffinityPreset: soft

  nodeAffinityPreset:
    type: ''

    key: ''

    values: []

  affinity: {}

  nodeSelector: {}

  tolerations: []

  topologySpreadConstraints: []

  priorityClassName: ''

  schedulerName: ''

  terminationGracePeriodSeconds: ''

  updateStrategy:
    type: RollingUpdate
    rollingUpdate: {}

  extraVolumeMounts: []

  extraVolumes: []

  sidecars: []

  initContainers: []

  extraPodSpec: {}

  networkPolicy:
    enabled: true

    allowExternal: true

    allowExternalEgress: true

    extraIngress: []

    extraEgress: []

    ingressNSMatchLabels: {}
    ingressNSPodMatchLabels: {}

  service:
    type: ClusterIP

    ports:
      postgresql: 2432

    nodePorts:
      postgresql: ''

    clusterIP: ''

    annotations: {}

    loadBalancerIP: ''

    externalTrafficPolicy: Cluster

    loadBalancerSourceRanges: []

    extraPorts: []

    sessionAffinity: None

    sessionAffinityConfig: {}

    headless:
      annotations: {}

  persistence:
    enabled: true

    existingClaim: ''

    mountPath: /bitnami/postgresql

    subPath: ''

    storageClass: ''

    accessModes:
      - ReadWriteOnce

    size: 8Gi

    annotations: {}

    labels: {}

    selector: {}

    dataSource: {}

  persistentVolumeClaimRetentionPolicy:
    enabled: false

    whenScaled: Retain

    whenDeleted: Retain

backup:
  enabled: false
  cronjob:
    schedule: '@daily'
    timeZone: ''
    concurrencyPolicy: Allow
    failedJobsHistoryLimit: 1
    successfulJobsHistoryLimit: 3
    startingDeadlineSeconds: ''
    ttlSecondsAfterFinished: ''
    restartPolicy: OnFailure

    podSecurityContext:
      enabled: true
      fsGroupChangePolicy: Always
      sysctls: []
      supplementalGroups: []
      fsGroup: 1001

    containerSecurityContext:
      enabled: true
      seLinuxOptions: {}
      runAsUser: 1001
      runAsGroup: 1001
      runAsNonRoot: true
      privileged: false
      readOnlyRootFilesystem: true
      allowPrivilegeEscalation: false
      capabilities:
        drop: ['ALL']
      seccompProfile:
        type: 'RuntimeDefault'
    command:
      - /bin/sh
      - -c
      - "pg_dumpall --clean --if-exists --load-via-partition-root --quote-all-identifiers --no-password --file=${PGDUMP_DIR}/pg_dumpall-$(date '+%Y-%m-%d-%H-%M').pgdump"
    labels: {}
    annotations: {}

    nodeSelector: {}

    resourcesPreset: 'nano'

    resources: {}

    networkPolicy:
      enabled: true
    storage:
      enabled: true

      existingClaim: ''

      resourcePolicy: ''

      storageClass: ''

      accessModes:
        - ReadWriteOnce

      size: 8Gi

      annotations: {}

      mountPath: /backup/pgdump

      subPath: ''

      volumeClaimTemplates:
        selector: {}

    extraVolumeMounts: []

    extraVolumes: []

volumePermissions:
  enabled: false

  image:
    registry: docker.io
    repository: bitnami/os-shell
    tag: 12-debian-12-r19
    digest: ''
    pullPolicy: IfNotPresent

    pullSecrets: []

  resourcesPreset: 'nano'

  resources: {}

  containerSecurityContext:
    seLinuxOptions: {}
    runAsUser: 0
    runAsGroup: 0
    runAsNonRoot: false
    seccompProfile:
      type: RuntimeDefault

serviceBindings:
  enabled: false

serviceAccount:
  create: true

  name: ''

  automountServiceAccountToken: false

  annotations: {}

rbac:
  create: false

  rules: []

psp:
  create: false

metrics:
  enabled: false

  image:
    registry: docker.io
    repository: bitnami/postgres-exporter
    tag: 0.12.0-debian-12-r17
    digest: ''
    pullPolicy: IfNotPresent

    pullSecrets: []

  collectors: {}

  customMetrics: {}

  extraEnvVars: []

  containerSecurityContext:
    enabled: true
    seLinuxOptions: {}
    runAsUser: 1001
    runAsGroup: 1001
    runAsNonRoot: true
    privileged: false
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    capabilities:
      drop: ['ALL']
    seccompProfile:
      type: 'RuntimeDefault'

  livenessProbe:
    enabled: true
    initialDelaySeconds: 2
    periodSeconds: 10
    timeoutSeconds: 2
    failureThreshold: 6
    successThreshold: 1

  readinessProbe:
    enabled: true
    initialDelaySeconds: 2
    periodSeconds: 10
    timeoutSeconds: 2
    failureThreshold: 6
    successThreshold: 1

  startupProbe:
    enabled: false
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 1
    failureThreshold: 12
    successThreshold: 1

  customLivenessProbe: {}

  customReadinessProbe: {}

  customStartupProbe: {}

  containerPorts:
    metrics: 9187

  resourcesPreset: 'nano'

  resources: {}

  service:
    ports:
      metrics: 9187

    clusterIP: ''

    sessionAffinity: None

    annotations:
      prometheus.io/scrape: 'true'
      prometheus.io/port: '{{ .Values.metrics.service.ports.metrics }}'

  serviceMonitor:
    enabled: false

    namespace: ''

    interval: ''

    scrapeTimeout: ''

    labels: {}

    selector: {}

    relabelings: []

    metricRelabelings: []

    honorLabels: false

    jobLabel: ''

  prometheusRule:
    enabled: false

    namespace: ''

    labels: {}

    rules: []
